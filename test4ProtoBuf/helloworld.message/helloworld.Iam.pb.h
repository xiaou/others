// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: helloworld.Iam.proto

#ifndef PROTOBUF_helloworld_2eIam_2eproto__INCLUDED
#define PROTOBUF_helloworld_2eIam_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace helloworld {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_helloworld_2eIam_2eproto();
void protobuf_AssignDesc_helloworld_2eIam_2eproto();
void protobuf_ShutdownFile_helloworld_2eIam_2eproto();

class Iam;
class Friend;

enum Iam_Sex {
  Iam_Sex_WOMAN = 0,
  Iam_Sex_MAN = 1
};
bool Iam_Sex_IsValid(int value);
const Iam_Sex Iam_Sex_Sex_MIN = Iam_Sex_WOMAN;
const Iam_Sex Iam_Sex_Sex_MAX = Iam_Sex_MAN;
const int Iam_Sex_Sex_ARRAYSIZE = Iam_Sex_Sex_MAX + 1;

const ::google::protobuf::EnumDescriptor* Iam_Sex_descriptor();
inline const ::std::string& Iam_Sex_Name(Iam_Sex value) {
  return ::google::protobuf::internal::NameOfEnum(
    Iam_Sex_descriptor(), value);
}
inline bool Iam_Sex_Parse(
    const ::std::string& name, Iam_Sex* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Iam_Sex>(
    Iam_Sex_descriptor(), name, value);
}
// ===================================================================

class Iam : public ::google::protobuf::Message {
 public:
  Iam();
  virtual ~Iam();
  
  Iam(const Iam& from);
  
  inline Iam& operator=(const Iam& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Iam& default_instance();
  
  void Swap(Iam* other);
  
  // implements Message ----------------------------------------------
  
  Iam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Iam& from);
  void MergeFrom(const Iam& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Iam_Sex Sex;
  static const Sex WOMAN = Iam_Sex_WOMAN;
  static const Sex MAN = Iam_Sex_MAN;
  static inline bool Sex_IsValid(int value) {
    return Iam_Sex_IsValid(value);
  }
  static const Sex Sex_MIN =
    Iam_Sex_Sex_MIN;
  static const Sex Sex_MAX =
    Iam_Sex_Sex_MAX;
  static const int Sex_ARRAYSIZE =
    Iam_Sex_Sex_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Sex_descriptor() {
    return Iam_Sex_descriptor();
  }
  static inline const ::std::string& Sex_Name(Sex value) {
    return Iam_Sex_Name(value);
  }
  static inline bool Sex_Parse(const ::std::string& name,
      Sex* value) {
    return Iam_Sex_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required .helloworld.Iam.Sex sex = 3;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 3;
  inline ::helloworld::Iam_Sex sex() const;
  inline void set_sex(::helloworld::Iam_Sex value);
  
  // repeated .helloworld.Friend friends = 4;
  inline int friends_size() const;
  inline void clear_friends();
  static const int kFriendsFieldNumber = 4;
  inline const ::helloworld::Friend& friends(int index) const;
  inline ::helloworld::Friend* mutable_friends(int index);
  inline ::helloworld::Friend* add_friends();
  inline const ::google::protobuf::RepeatedPtrField< ::helloworld::Friend >&
      friends() const;
  inline ::google::protobuf::RepeatedPtrField< ::helloworld::Friend >*
      mutable_friends();
  
  // optional string str = 5 [default = "xx00"];
  inline bool has_str() const;
  inline void clear_str();
  static const int kStrFieldNumber = 5;
  inline const ::std::string& str() const;
  inline void set_str(const ::std::string& value);
  inline void set_str(const char* value);
  inline void set_str(const char* value, size_t size);
  inline ::std::string* mutable_str();
  inline ::std::string* release_str();
  
  // @@protoc_insertion_point(class_scope:helloworld.Iam)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_str();
  inline void clear_has_str();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::int32 id_;
  int sex_;
  ::google::protobuf::RepeatedPtrField< ::helloworld::Friend > friends_;
  ::std::string* str_;
  static const ::std::string _default_str_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_helloworld_2eIam_2eproto();
  friend void protobuf_AssignDesc_helloworld_2eIam_2eproto();
  friend void protobuf_ShutdownFile_helloworld_2eIam_2eproto();
  
  void InitAsDefaultInstance();
  static Iam* default_instance_;
};
// -------------------------------------------------------------------

class Friend : public ::google::protobuf::Message {
 public:
  Friend();
  virtual ~Friend();
  
  Friend(const Friend& from);
  
  inline Friend& operator=(const Friend& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Friend& default_instance();
  
  void Swap(Friend* other);
  
  // implements Message ----------------------------------------------
  
  Friend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Friend& from);
  void MergeFrom(const Friend& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required .helloworld.Iam.Sex sex = 2;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 2;
  inline ::helloworld::Iam_Sex sex() const;
  inline void set_sex(::helloworld::Iam_Sex value);
  
  // @@protoc_insertion_point(class_scope:helloworld.Friend)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_sex();
  inline void clear_has_sex();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  int sex_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_helloworld_2eIam_2eproto();
  friend void protobuf_AssignDesc_helloworld_2eIam_2eproto();
  friend void protobuf_ShutdownFile_helloworld_2eIam_2eproto();
  
  void InitAsDefaultInstance();
  static Friend* default_instance_;
};
// ===================================================================


// ===================================================================

// Iam

// required int32 id = 1;
inline bool Iam::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Iam::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Iam::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Iam::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Iam::id() const {
  return id_;
}
inline void Iam::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string name = 2;
inline bool Iam::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Iam::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Iam::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Iam::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Iam::name() const {
  return *name_;
}
inline void Iam::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Iam::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Iam::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Iam::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Iam::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .helloworld.Iam.Sex sex = 3;
inline bool Iam::has_sex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Iam::set_has_sex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Iam::clear_has_sex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Iam::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::helloworld::Iam_Sex Iam::sex() const {
  return static_cast< ::helloworld::Iam_Sex >(sex_);
}
inline void Iam::set_sex(::helloworld::Iam_Sex value) {
  GOOGLE_DCHECK(::helloworld::Iam_Sex_IsValid(value));
  set_has_sex();
  sex_ = value;
}

// repeated .helloworld.Friend friends = 4;
inline int Iam::friends_size() const {
  return friends_.size();
}
inline void Iam::clear_friends() {
  friends_.Clear();
}
inline const ::helloworld::Friend& Iam::friends(int index) const {
  return friends_.Get(index);
}
inline ::helloworld::Friend* Iam::mutable_friends(int index) {
  return friends_.Mutable(index);
}
inline ::helloworld::Friend* Iam::add_friends() {
  return friends_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::helloworld::Friend >&
Iam::friends() const {
  return friends_;
}
inline ::google::protobuf::RepeatedPtrField< ::helloworld::Friend >*
Iam::mutable_friends() {
  return &friends_;
}

// optional string str = 5 [default = "xx00"];
inline bool Iam::has_str() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Iam::set_has_str() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Iam::clear_has_str() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Iam::clear_str() {
  if (str_ != &_default_str_) {
    str_->assign(_default_str_);
  }
  clear_has_str();
}
inline const ::std::string& Iam::str() const {
  return *str_;
}
inline void Iam::set_str(const ::std::string& value) {
  set_has_str();
  if (str_ == &_default_str_) {
    str_ = new ::std::string;
  }
  str_->assign(value);
}
inline void Iam::set_str(const char* value) {
  set_has_str();
  if (str_ == &_default_str_) {
    str_ = new ::std::string;
  }
  str_->assign(value);
}
inline void Iam::set_str(const char* value, size_t size) {
  set_has_str();
  if (str_ == &_default_str_) {
    str_ = new ::std::string;
  }
  str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Iam::mutable_str() {
  set_has_str();
  if (str_ == &_default_str_) {
    str_ = new ::std::string(_default_str_);
  }
  return str_;
}
inline ::std::string* Iam::release_str() {
  clear_has_str();
  if (str_ == &_default_str_) {
    return NULL;
  } else {
    ::std::string* temp = str_;
    str_ = const_cast< ::std::string*>(&_default_str_);
    return temp;
  }
}

// -------------------------------------------------------------------

// Friend

// required string name = 1;
inline bool Friend::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Friend::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Friend::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Friend::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Friend::name() const {
  return *name_;
}
inline void Friend::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Friend::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Friend::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Friend::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Friend::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .helloworld.Iam.Sex sex = 2;
inline bool Friend::has_sex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Friend::set_has_sex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Friend::clear_has_sex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Friend::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::helloworld::Iam_Sex Friend::sex() const {
  return static_cast< ::helloworld::Iam_Sex >(sex_);
}
inline void Friend::set_sex(::helloworld::Iam_Sex value) {
  GOOGLE_DCHECK(::helloworld::Iam_Sex_IsValid(value));
  set_has_sex();
  sex_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace helloworld

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::helloworld::Iam_Sex>() {
  return ::helloworld::Iam_Sex_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_helloworld_2eIam_2eproto__INCLUDED
