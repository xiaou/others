CMakeLists.txt
-----------------------------------------
cmake_minimum_required(VERSION 2.8)
PROJECT(HELLO)
SET(CMAKE_C_COMPILER "g++")
SET(CMAKE_C_FLAGS "-g")

# 定义变量
SET(HELLO_SOURCE_DIR ./src/)
SET(HELLO_BINARY_DIR ./bin/)

# Source code subdirectories
SUBDIRS(src2 test)

# Create a library from the hello.cxx file
ADD_LIBRARY(Hello hello.c) #自指定的list中产生静态库。如果在库名后加SHARED参数则动态库。

# Location of library include files
INCLUDE_DIRECTORIES(${HELLO_SOURCE_DIR}/include)

# Library location for the linker
LINK_DIRECTORIES(${HELLO_BINARY_DIR}/src)

# helloDemo executable built from demo.c
ADD_EXECUTABLE(helloDemo demo.c) #自指定的list中产生执行档

# Link the executable to the Hello library.
TARGET_LINK_LIBRARIES(helloDemo Hello)
---------------------------------------------------------------
---------------------------------------------------------------
CMake的scripting language

以分號或空格區隔
Lists A;B;C 
COMMAND(參數1  “參數2 包含空白 ABC” ${A_LIST} “${A_STRING}”)
set(CMAKE_C_COMPILER "g++") #指定.c文件用g++编译器
MESSAGE([SEND_ERROR | STATUS | FATAL_ERROR] "message to display"
...)


eg:
TARGET_LINK_LIBRARIES(myTarget lib2 lib2)
FIND_LIBRARY(MY_LIB NAMES my1 my2 PATHS /for /bar)
SET(A_LIST ${A_LIST} foo)
SET(A_STRING “${A_STRING} bar”)

条件控制：
IF(CONDITION)  #IF中的变量可直接引用而不要用${}来引用
MESSAGE(“Yes”)
ELSE(CONDITION)
MESSAGE(“No”)
ENDIF(CONDITION)

IF(NOT EXISTS ${PROJECT_SOURCE_DIR}/bin) #文件不存在就创建~
EXEC_PROGRAM(mkdir 
ARGS
${PROJECT_SOURCE_DIR}/bin)
ENDIF()

FOREACH(k A B C)
   MESSAGE(“${k}: ${${k}}”)
ENDFOREACH(k)

MACRO(MY_MACRO arg1 arg2)
   SET(${arg1} “${${arg2}}”)
ENDMACRO(MY_MACRO)
MY_MACRO(A B)


一个例子：
# CMakeLists.txt
PROJECT( fdclock )
CMakeLists.txt
FIND_PACKAGE( PkgConfig )
PKG_CHECK_MODULES( cairo REQUIRED cairo )
INCLUDE_DIRECTORIES( ${cairo_INCLUDE_DIRS} )
LINK_DIRECTORIES( ${cairo_LIBRARY_DIRS} )
SET(fdclock_SRCS fdclock.c fdface.c)

ADD_EXECUTABLE( fdclock ${fdclock_SRCS} )
TARGET_LINK_LIBRARIES( fdclock ${cairo_LIBRARIES} )
INSTALL( TARGETS fdclock 
         DESTINATION ${CMAKE_INSTALL_PREFIX}/bin )

执行shell命令：     
EXEC_PROGRAM(cp 
ARGS 
${CMAKE_CURRENT_SOURCE_DIR}/see-* 
${EXECUTABLE_OUTPUT_PATH}/)

各宏：

各个目录：
${CMAKE_CURRENT_SOURCE_DIR}当前CMakeLists.txt所在目录.
${PROJECT_SOURCE_DIR}本项目所在目录(即工程顶层目录).
${CMAKE_SOURCE_DIR}同上。
${PROJECT_BINARY_DIR}本项目的编译目录.
SET(LIBRARY_OUTPUT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/lib)设定lib（产品）输出目录.
SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR})设定程序(产品)输出目录.

AUX_SOURCE_DIRECTORY(. SRC_LIST)把目录下所有的源文件添加到SRC_LIST变量。
${PROJECT_NAME}取本工程名.

ADD_SUBDIRECTORY(LOG)

包含搜索路径：
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/../include /usr/local/ssl/include)
LINK_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/../lib  /usr/local/ssl/lib)

添加target（输出的东西）:
ADD_EXECUTABLE(${PROJECT_NAME} ${SRC_LIST})制定一个exec产品（一个名为工程名的target）
ADD_LIBRARY(LOG SHARED/*可选*/ ${SRC})指定一个lib产品（一个名为LOG的target）.
同时生成静态库和动态库（同名）：
ADD_LIBRARY(${LIB_NAME} SHARED ${SRC_LIST})
ADD_LIBRARY(${LIB_NAME}_STAIC ${SRC_LIST})  #曲线救国啊.
SET_TARGET_PROPERTIES(${LIB_NAME}_STAIC PROPERTIES OUTPUT_NAME ${LIB_NAME})

链接库：
TARGET_LINK_LIBRARIES(LOG pthread log4cplus rt _common)缩写是添加动态库，添加静态库必须写全称liblog4cplus.a酱紫.)

添加预编译宏：
ADD_DEFINITIONS( -DMACRO1 –DMACRO2 … ) -D后跟宏.

target A的依赖target B：
ADD_DEPENDENCIES(target-name depend-target1 depend-target2)



xxxx
